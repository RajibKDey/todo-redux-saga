{"version":3,"sources":["themes/index.js","constants/index.js","components/ToDoCard/index.js","services/createToDo/action/index.js","components/CustomDialog/index.js","screens/ToDoCreate/index.js","App.js","serviceWorker.js","services/createToDo/reducer/index.js","services/reducers/index.js","services/createToDo/saga/index.js","services/sagas/index.js","index.js"],"names":["lightTheme","createMuiTheme","palette","almostBlack","0","100","200","300","400","500","600","700","800","900","subText","typography","fontFamily","join","light","responsiveFontSizes","ACTION_TYPES","SAGA_ACTIONS","useStyles","makeStyles","theme","basePadding","padding","spacing","flex1","flex","card","boxSizing","width","height","capitalize","texTransform","green","borderLeft","orange","red","ToDoCard","props","classes","dispatch","useDispatch","flagGreen","flagOrange","flagRed","data","severity","Card","className","classnames","CardHeader","title","Grid","container","alignItems","item","Typography","variant","toString","toUpperCase","justify","IconButton","onClick","id","type","payload","Icon","Divider","CardContent","date","message","close","cursor","position","top","right","transform","fontSize","color","headerText","breakpoints","down","CustomDialog","Dialog","fullWidth","maxWidth","open","onClose","handleClose","aria-labelledby","aria-describedby","DialogTitle","dialogTitle","DialogContent","DialogContentText","children","paddingBottom","ToDoCreate","inputLabel","React","useRef","useState","labelWidth","setLabelWidth","useEffect","current","offsetWidth","ToDo","values","toDo","Date","now","code","useSelector","state","todo","enableReinitialize","initialValues","moment","format","onSubmit","event","validationSchema","Yup","shape","required","touched","errors","handleChange","handleBlur","handleSubmit","setFieldValue","handleReset","lg","TextField","name","error","value","onChange","e","target","onBlur","helperText","label","FormControl","InputLabel","ref","htmlFor","Select","native","textFieldWidth","inputProps","defaultValue","InputProps","min","InputLabelProps","shrink","multiline","rows","Button","paperDimension","backgroundColor","buttonIcon","paddingTop","paddingRightIcon","paddingRight","marginRightItem","marginRight","filter","borderRadius","boxShadow","fontWhite","App","openPopup","setOpenPopup","filterValue","setFilterValue","filteredData","setFilteredData","tempData","length","forEach","row","push","Paper","elevation","select","margin","placeholder","map","key","Boolean","window","location","hostname","match","initialState","loading","success","rootReducer","combineReducers","action","workCreateToDoList","workDeleteToDoList","watchCreateToDoList","watchDeleteToDoList","put","resultData","console","log","updatedToDo","takeLatest","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","StrictMode","ThemeProvider","Themes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.3294fe7d.chunk.js","sourcesContent":["import { createMuiTheme, responsiveFontSizes } from \"@material-ui/core/styles\";\r\n\r\nconst lightTheme = createMuiTheme({\r\n  palette: {\r\n    // primary: {\r\n    //     light: '#3381ff',\r\n    //     main: '#0C1B66',\r\n    //     dark: '#111940'\r\n    // },\r\n    // secondary: {\r\n    //   light: '#63ddac',\r\n    //   main: '#3dd598',\r\n    //   dark: '#2a956a'\r\n    // },\r\n    // success: {\r\n    //   light: '#9bcf63',\r\n    //   main: '#82c43c',\r\n    //   dark: '#5b892a'\r\n    // },\r\n    // error: {\r\n    //   light: '#fc7b7b',\r\n    //   main: '#fc5a5a',\r\n    //   dark: '#b03e3e'\r\n    // },\r\n    // warning: {\r\n    //   light: '#ffab6e',\r\n    //   main: '#ff974a',\r\n    //   dark: '#b26933'\r\n    // },\r\n    // info: {\r\n    //   light: '#73c3ff',\r\n    //   main: '#50b5ff',\r\n    //   dark: '#387eb2'\r\n    // },\r\n    almostBlack: {\r\n      0: \"#ffffff\",\r\n      100: \"#fafafb\",\r\n      200: \"#f1f1f5\",\r\n      300: \"#e2e2ea\",\r\n      400: \"#d5d5dc\",\r\n      500: \"#b5b5be\",\r\n      600: \"#92929d\",\r\n      700: \"#696974\",\r\n      800: \"#44444f\",\r\n      900: \"#171725\",\r\n    },\r\n    subText: {\r\n      // main : '#6A6A66'\r\n    },\r\n    // background: {\r\n    //   paper: '#fff',\r\n    //   default: '#fafafb'\r\n    // },\r\n    // text: {\r\n    //   primary: '#171725',\r\n    //   secondary: '#92929d',\r\n    //   disabled: '#e2e2ea',\r\n    //   hint: '#e2e2ea'\r\n    // }\r\n  },\r\n  // status: {\r\n  //   danger: 'orange',\r\n  // },\r\n  typography: {\r\n    fontFamily: [\"Raleway\", \"sans-serif\", \"Montserrat\", \"Roboto\"].join(\",\"),\r\n  },\r\n});\r\n\r\nexport default {\r\n  light: responsiveFontSizes(lightTheme),\r\n};\r\n","export const ACTION_TYPES = {\r\n  CREATE_TODO_STARTED: \"CREATE_TODO_STARTED\",\r\n  CREATE_TODO_SUCCESS: \"CREATE_TODO_SUCCESS\",\r\n  CREATE_TODO_RESET: \"CREATE_TODO_RESET\",\r\n  DELETE_TODO_SUCCESS: \"DELETE_TODO_SUCCESS\",\r\n};\r\n\r\nexport const SAGA_ACTIONS = {\r\n  CREATE_TODO: \"CREATE_TODO\",\r\n  DELETE_TODO: \"DELETE_TODO\",\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Divider,\r\n  IconButton,\r\n  Icon,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { deleteToDo } from \"../../services/createToDo/action\";\r\nimport classnames from \"classnames\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  basePadding: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  flex1: {\r\n    flex: 1,\r\n  },\r\n  card: {\r\n    boxSizing: \"border-box\",\r\n    padding: \"5px\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  capitalize: {\r\n    texTransform: \"capitalize\",\r\n  },\r\n  green: {\r\n    borderLeft: \"5px solid #008000\",\r\n  },\r\n  orange: {\r\n    borderLeft: \"5px solid #FFA500\",\r\n  },\r\n  red: {\r\n    borderLeft: \"5px solid #FF0000\",\r\n  },\r\n}));\r\n\r\nexport default function ToDoCard(props) {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const handleDelete = () => {\r\n    dispatch(deleteToDo(props.data.id));\r\n  };\r\n\r\n  let flagGreen = false,\r\n    flagOrange = false,\r\n    flagRed = false;\r\n  if (props.data.severity === \"success\") {\r\n    flagGreen = true;\r\n  } else if (props.data.severity === \"warning\") {\r\n    flagOrange = true;\r\n  } else {\r\n    flagRed = true;\r\n  }\r\n\r\n  return (\r\n    <Card\r\n      className={classnames(\r\n        classes.card,\r\n        { [classes.green]: flagGreen },\r\n        { [classes.orange]: flagOrange },\r\n        { [classes.red]: flagRed }\r\n      )}\r\n    >\r\n      <CardHeader\r\n        title={\r\n          <Grid container alignItems=\"center\">\r\n            <Grid item className={classes.flex1}>\r\n              <Typography variant=\"h6\">\r\n                <b>{props.data.title.toString().toUpperCase()}</b>\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item className={classes.flex1}>\r\n              <Grid container justify=\"flex-end\">\r\n                <IconButton onClick={handleDelete}>\r\n                  <Icon>delete</Icon>\r\n                </IconButton>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        }\r\n      />\r\n      <Divider />\r\n      <CardContent>\r\n        <Grid container>\r\n          <Typography variant=\"subtitle1\">\r\n            {\"Date: \" + props.data.date}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid container>\r\n          <Typography variant=\"subtitle2\" className={classes.capitalize}>\r\n            {\"Message: \" + props.data.message}\r\n          </Typography>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import { ACTION_TYPES, SAGA_ACTIONS } from \"../../../constants\";\r\n\r\nexport const createToDo = (data) => ({\r\n  type: SAGA_ACTIONS.CREATE_TODO,\r\n  payload: data,\r\n});\r\n\r\nexport const deleteToDo = (data) => ({\r\n  type: SAGA_ACTIONS.DELETE_TODO,\r\n  payload: data,\r\n});\r\n\r\nexport const resetToDo = () => ({\r\n  type: ACTION_TYPES.CREATE_TODO_RESET,\r\n});\r\n","import React from \"react\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { Grid, makeStyles, Typography, Divider } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  flex1: {\r\n    flex: 1,\r\n  },\r\n  close: {\r\n    cursor: \"pointer\",\r\n    position: \"absolute\",\r\n    top: \"30px\",\r\n    right: \"0%\",\r\n    padding: \"12px 16px\",\r\n    transform: \"translate(0%, -50%)\",\r\n    fontSize: \"32px\",\r\n    color: \"#9C1304\",\r\n  },\r\n  headerText: {\r\n    \"& h2\": {\r\n      [theme.breakpoints.down(\"xs\")]: {\r\n        fontSize: \"1rem\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nfunction CustomDialog(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Dialog\r\n        fullWidth={props.fullWidth}\r\n        maxWidth={props.maxWidth}\r\n        open={props.open}\r\n        onClose={props.handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <Grid container>\r\n          <Grid item className={classes.flex1}>\r\n            <DialogTitle className={classes.headerText} id=\"title\">\r\n              {props.dialogTitle}\r\n            </DialogTitle>\r\n          </Grid>\r\n          <Grid container item justify=\"flex-end\">\r\n            <Typography\r\n              className={classes.close}\r\n              onClick={props.handleClose}\r\n              variant=\"body1\"\r\n            >\r\n              &times;\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Divider />\r\n        <DialogContent>\r\n          <DialogContentText>{props.children}</DialogContentText>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CustomDialog;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  makeStyles,\r\n  Grid,\r\n  FormControlLabel,\r\n  FormControl,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  Typography,\r\n  Paper,\r\n  Button,\r\n  Select,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport classnames from \"classnames\";\r\nimport moment from \"moment\";\r\nimport { createToDo, resetToDo } from \"../../services/createToDo/action\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  basePadding: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  cursor: {\r\n    cursor: \"pointer\",\r\n  },\r\n  paddingBottom: {\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function ToDoCreate() {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const inputLabel = React.useRef(null);\r\n  const [labelWidth, setLabelWidth] = useState(0);\r\n  React.useEffect(() => {\r\n    setLabelWidth(inputLabel.current.offsetWidth);\r\n  }, []);\r\n\r\n  const ToDo = (values) => {\r\n    let toDo = values;\r\n    toDo.id = Date.now();\r\n    dispatch(createToDo(toDo));\r\n  };\r\n\r\n  const code = useSelector((state) => state.todo.code);\r\n\r\n  useEffect(() => {\r\n    if (code) {\r\n      dispatch(resetToDo());\r\n    }\r\n  }, [code]);\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        enableReinitialize={true}\r\n        initialValues={{\r\n          title: \"\",\r\n          date: moment().format(\"YYYY-MM-DD\"),\r\n          severity: \"success\",\r\n          message: \"\",\r\n          id: \"\",\r\n        }}\r\n        onSubmit={(values, event) => {\r\n          ToDo(values);\r\n        }}\r\n        validationSchema={Yup.object().shape({\r\n          title: Yup.string().required(\"Required\"),\r\n          message: Yup.string().required(\"Required\"),\r\n        })}\r\n      >\r\n        {(props) => {\r\n          const {\r\n            values,\r\n            touched,\r\n            errors,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n            handleReset,\r\n            setFieldValue,\r\n          } = props;\r\n          return (\r\n            <form onSubmit={handleSubmit}>\r\n              <Grid container>\r\n                <Grid item lg={12} className={classes.paddingBottom}>\r\n                  <TextField\r\n                    id=\"title\"\r\n                    name=\"title\"\r\n                    error={errors.title && touched.title}\r\n                    value={values.title}\r\n                    onChange={(e) => {\r\n                      handleChange(e);\r\n                      e.target.value === \" \" && setFieldValue(\"title\", \"\");\r\n                    }}\r\n                    onBlur={handleBlur}\r\n                    helperText={errors.title && touched.title && errors.title}\r\n                    label=\"Title\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={12} className={classes.paddingBottom}>\r\n                  <Grid container alignItems=\"center\">\r\n                    <Grid item lg={6}>\r\n                      <FormControl variant=\"outlined\" className={classes.width}>\r\n                        <InputLabel ref={inputLabel} htmlFor=\"severity\">\r\n                          severity\r\n                        </InputLabel>\r\n                        <Select\r\n                          native\r\n                          name=\"severity\"\r\n                          className={classes.textFieldWidth}\r\n                          error={errors.severity && touched.severity}\r\n                          value={values.severity}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          helperText={\r\n                            errors.severity &&\r\n                            touched.severity &&\r\n                            errors.severity\r\n                          }\r\n                          labelWidth={labelWidth}\r\n                          required\r\n                          inputProps={{\r\n                            name: \"severity\",\r\n                            id: \"severity\",\r\n                          }}\r\n                        >\r\n                          <option\r\n                            className={classnames(\r\n                              classes.basePadding,\r\n                              classes.cursor\r\n                            )}\r\n                            value={\"success\"}\r\n                          >\r\n                            Success\r\n                          </option>\r\n                          <option\r\n                            className={classnames(\r\n                              classes.basePadding,\r\n                              classes.cursor\r\n                            )}\r\n                            value={\"warning\"}\r\n                          >\r\n                            Warning\r\n                          </option>\r\n                          <option\r\n                            className={classnames(\r\n                              classes.basePadding,\r\n                              classes.cursor\r\n                            )}\r\n                            value={\"error\"}\r\n                          >\r\n                            Error\r\n                          </option>\r\n                        </Select>\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item lg={6}>\r\n                      <TextField\r\n                        id=\"date\"\r\n                        label=\"Date\"\r\n                        type=\"date\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        defaultValue={moment().format(\"YYYY-MM-DD\")}\r\n                        InputProps={{\r\n                          inputProps: {\r\n                            min: moment().format(\"YYYY-MM-DD\"),\r\n                          },\r\n                        }}\r\n                        error={errors.date && touched.date}\r\n                        onChange={(event) =>\r\n                          setFieldValue(\r\n                            \"date\",\r\n                            moment(event.target.value).format(\"DD-MM-YYYY\")\r\n                          )\r\n                        }\r\n                        onBlur={handleBlur}\r\n                        helperText={errors.date && touched.date && errors.date}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item lg={12} className={classes.paddingBottom}>\r\n                  <TextField\r\n                    fullWidth\r\n                    id=\"message\"\r\n                    name=\"message\"\r\n                    error={errors.message && touched.message}\r\n                    value={values.message}\r\n                    onChange={(e) => {\r\n                      handleChange(e);\r\n                      e.target.value === \" \" && setFieldValue(\"message\", \"\");\r\n                    }}\r\n                    onBlur={handleBlur}\r\n                    helperText={\r\n                      errors.message && touched.message && errors.message\r\n                    }\r\n                    label=\"Message\"\r\n                    multiline\r\n                    rows=\"3\"\r\n                    defaultValue=\"\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Grid container justify=\"flex-end\">\r\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                  Add\r\n                </Button>\r\n              </Grid>\r\n            </form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Grid,\n  Typography,\n  makeStyles,\n  Paper,\n  Button,\n  Icon,\n  TextField,\n} from \"@material-ui/core\";\nimport ToDoCard from \"./components/ToDoCard\";\nimport CustomDialog from \"./components/CustomDialog\";\nimport classnames from \"classnames\";\nimport \"./App.css\";\nimport ToDoCreate from \"./screens/ToDoCreate\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n  basePadding: {\n    padding: theme.spacing(2),\n  },\n  paperDimension: {\n    width: \"100%\",\n    height: \"100vh\",\n    backgroundColor: \"#696969\",\n  },\n  buttonIcon: {\n    fontSize: \"30px\",\n    paddingTop: \"3px\",\n  },\n  paddingRightIcon: {\n    paddingRight: theme.spacing(1),\n  },\n  flex1: {\n    flex: 1,\n  },\n  marginRightItem: {\n    marginRight: theme.spacing(4),\n  },\n  textFieldWidth: {\n    width: \"200px\",\n  },\n  filter: {\n    backgroundColor: \"#DCDCDC\",\n    padding: \"0px 15px\",\n    borderRadius: \"4px\",\n    boxShadow: \"0px 0px 5px 0px rgba(0,0,0,0.75)\",\n  },\n  fontWhite: {\n    color: \"white\",\n  },\n  cursor: {\n    cursor: \"pointer\",\n  },\n  item: {\n    boxSizing: \"border-box\",\n    padding: \"5px\",\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const data = useSelector((state) => state.todo.data);\n\n  useEffect(() => {}, []);\n\n  const [openPopup, setOpenPopup] = useState(false);\n  const addToDo = () => {\n    setOpenPopup(true);\n  };\n\n  const handleClose = () => {\n    setOpenPopup(false);\n  };\n\n  const [filterValue, setFilterValue] = useState(\"none\");\n  const filterChange = (e) => {\n    setFilterValue(e.target.value);\n  };\n\n  const [filteredData, setFilteredData] = useState([]);\n  useEffect(() => {\n    let tempData = [];\n    if (filterValue !== \"none\" && data.length > 0) {\n      data.forEach((row) => {\n        if (row.severity === filterValue) {\n          tempData.push(row);\n        }\n      });\n      setFilteredData(tempData);\n    } else {\n      setFilteredData(data);\n    }\n  }, [data]);\n\n  useEffect(() => {\n    let tempData = [];\n    if (filterValue !== \"none\" && data.length > 0) {\n      data.forEach((row) => {\n        if (row.severity === filterValue) {\n          tempData.push(row);\n        }\n      });\n      setFilteredData(tempData);\n    } else {\n      setFilteredData(data);\n    }\n  }, [filterValue]);\n\n  return (\n    <>\n      <Paper\n        elevation={0}\n        className={classnames(classes.paperDimension, classes.basePadding)}\n      >\n        <Grid container justify=\"center\" className={classes.basePadding}>\n          <Typography variant=\"h3\" className={classes.fontWhite}>\n            <b>To-Do List</b>\n          </Typography>\n        </Grid>\n        <Grid\n          container\n          justify=\"center\"\n          alignItems=\"center\"\n          className={classes.basePadding}\n        >\n          <Grid item lg={4}>\n            <Typography variant=\"h5\" className={classes.fontWhite}>\n              <b>To-Do Area</b>\n            </Typography>\n          </Grid>\n          <Grid item className={classes.flex1}>\n            <Grid container justify=\"flex-end\" alignItems=\"center\">\n              <Grid\n                item\n                className={classnames(classes.marginRightItem, classes.filter)}\n              >\n                <Grid container alignItems=\"center\">\n                  <Grid item className={classes.paddingRightIcon}>\n                    <Typography variant=\"h6\">\n                      <b>Filter :</b>\n                    </Typography>\n                  </Grid>\n                  <Grid item>\n                    <TextField\n                      className={classes.textFieldWidth}\n                      select\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      name=\"filter\"\n                      value={filterValue}\n                      onChange={filterChange}\n                      placeholder=\"Filter By Importance\"\n                    >\n                      <option\n                        className={classnames(\n                          classes.basePadding,\n                          classes.cursor\n                        )}\n                        value={\"none\"}\n                      >\n                        None\n                      </option>\n                      <option\n                        className={classnames(\n                          classes.basePadding,\n                          classes.cursor\n                        )}\n                        value={\"success\"}\n                      >\n                        Success\n                      </option>\n                      <option\n                        className={classnames(\n                          classes.basePadding,\n                          classes.cursor\n                        )}\n                        value={\"warning\"}\n                      >\n                        Warning\n                      </option>\n                      <option\n                        className={classnames(\n                          classes.basePadding,\n                          classes.cursor\n                        )}\n                        value={\"error\"}\n                      >\n                        Error\n                      </option>\n                    </TextField>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item>\n                <Button variant=\"contained\" onClick={addToDo}>\n                  <Grid container alignItems=\"center\">\n                    <Grid item className={classes.paddingRightIcon}>\n                      <Icon className={classes.buttonIcon}>add</Icon>\n                    </Grid>\n                    <Grid item>\n                      <Typography variant=\"h6\">Add</Typography>\n                    </Grid>\n                  </Grid>\n                </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid container>\n          {filteredData &&\n            filteredData.map((item) => (\n              <Grid item lg={4} className={classes.item}>\n                <ToDoCard key={item.id} data={item} />\n              </Grid>\n            ))}\n        </Grid>\n      </Paper>\n      <CustomDialog\n        dialogTitle={\"Create To-Do\"}\n        handleClose={handleClose}\n        open={openPopup}\n        maxWidth={\"sm\"}\n      >\n        <ToDoCreate />\n      </CustomDialog>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ACTION_TYPES } from \"../../../constants\";\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  success: false,\r\n  message: \"\",\r\n  data: [],\r\n  error: false,\r\n  code: false,\r\n};\r\n\r\nexport default function createToDoReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ACTION_TYPES.CREATE_TODO_STARTED:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case ACTION_TYPES.CREATE_TODO_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        success: action.payload.success,\r\n        data: action.payload.data,\r\n        message: action.payload.message,\r\n        code: true,\r\n      };\r\n    case ACTION_TYPES.CREATE_TODO_RESET:\r\n      return {\r\n        ...state,\r\n        code: false,\r\n      };\r\n    case ACTION_TYPES.DELETE_TODO_SUCCESS:\r\n      return {\r\n        ...state,\r\n        data: action.payload.data,\r\n        success: action.payload.success,\r\n        message: action.payload.message,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport createToDoReducer from \"../createToDo/reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  todo: createToDoReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { put, takeLatest, select } from \"redux-saga/effects\";\r\nimport { ACTION_TYPES, SAGA_ACTIONS } from \"../../../constants\";\r\n\r\nfunction* workCreateToDoList(action) {\r\n  yield put({ type: ACTION_TYPES.CREATE_TODO_STARTED });\r\n  try {\r\n    let resultData = yield select((state) => state.todo.data);\r\n    resultData = [...resultData, action.payload];\r\n    let payload = {\r\n      message: \"Todo added successfully\",\r\n      success: true,\r\n      data: resultData,\r\n    };\r\n    yield put({\r\n      type: ACTION_TYPES.CREATE_TODO_SUCCESS,\r\n      payload: payload,\r\n    });\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nfunction* workDeleteToDoList(action) {\r\n  try {\r\n    let resultData = yield select((state) => state.todo.data);\r\n    let updatedToDo = [];\r\n    resultData.forEach((row) => {\r\n      if (row.id !== action.payload) {\r\n        updatedToDo.push(row);\r\n      }\r\n    });\r\n    let payload = {\r\n      message: \"Todo deleted successfully\",\r\n      success: true,\r\n      data: updatedToDo,\r\n    };\r\n    yield put({\r\n      type: ACTION_TYPES.DELETE_TODO_SUCCESS,\r\n      payload: payload,\r\n    });\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nexport function* watchCreateToDoList() {\r\n  yield takeLatest(SAGA_ACTIONS.CREATE_TODO, workCreateToDoList);\r\n}\r\n\r\nexport function* watchDeleteToDoList() {\r\n  yield takeLatest(SAGA_ACTIONS.DELETE_TODO, workDeleteToDoList);\r\n}\r\n","import { all } from \"redux-saga/effects\";\r\nimport { watchCreateToDoList, watchDeleteToDoList } from \"../createToDo/saga\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([watchCreateToDoList(), watchDeleteToDoList()]);\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport Themes from \"./themes\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./services/reducers\";\nimport { Provider } from \"react-redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport rootSaga from \"./services/sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={Themes.light}>\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}